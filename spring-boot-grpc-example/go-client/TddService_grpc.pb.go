// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: TddService.proto

package tdd_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Tdd_V1Client is the client API for Tdd_V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Tdd_V1Client interface {
	TLV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseSingle, error)
	TLV2(ctx context.Context, in *RequestForm, opts ...grpc.CallOption) (Tdd_V1_TLV2Client, error)
}

type tdd_V1Client struct {
	cc grpc.ClientConnInterface
}

func NewTdd_V1Client(cc grpc.ClientConnInterface) Tdd_V1Client {
	return &tdd_V1Client{cc}
}

func (c *tdd_V1Client) TLV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseSingle, error) {
	out := new(ResponseSingle)
	err := c.cc.Invoke(ctx, "/tdd_v1.Tdd_V1/TLV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tdd_V1Client) TLV2(ctx context.Context, in *RequestForm, opts ...grpc.CallOption) (Tdd_V1_TLV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &Tdd_V1_ServiceDesc.Streams[0], "/tdd_v1.Tdd_V1/TLV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &tdd_V1TLV2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tdd_V1_TLV2Client interface {
	Recv() (*ResponseSingle, error)
	grpc.ClientStream
}

type tdd_V1TLV2Client struct {
	grpc.ClientStream
}

func (x *tdd_V1TLV2Client) Recv() (*ResponseSingle, error) {
	m := new(ResponseSingle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Tdd_V1Server is the server API for Tdd_V1 service.
// All implementations must embed UnimplementedTdd_V1Server
// for forward compatibility
type Tdd_V1Server interface {
	TLV1(context.Context, *emptypb.Empty) (*ResponseSingle, error)
	TLV2(*RequestForm, Tdd_V1_TLV2Server) error
	mustEmbedUnimplementedTdd_V1Server()
}

// UnimplementedTdd_V1Server must be embedded to have forward compatible implementations.
type UnimplementedTdd_V1Server struct {
}

func (UnimplementedTdd_V1Server) TLV1(context.Context, *emptypb.Empty) (*ResponseSingle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TLV1 not implemented")
}
func (UnimplementedTdd_V1Server) TLV2(*RequestForm, Tdd_V1_TLV2Server) error {
	return status.Errorf(codes.Unimplemented, "method TLV2 not implemented")
}
func (UnimplementedTdd_V1Server) mustEmbedUnimplementedTdd_V1Server() {}

// UnsafeTdd_V1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Tdd_V1Server will
// result in compilation errors.
type UnsafeTdd_V1Server interface {
	mustEmbedUnimplementedTdd_V1Server()
}

func RegisterTdd_V1Server(s grpc.ServiceRegistrar, srv Tdd_V1Server) {
	s.RegisterService(&Tdd_V1_ServiceDesc, srv)
}

func _Tdd_V1_TLV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Tdd_V1Server).TLV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdd_v1.Tdd_V1/TLV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Tdd_V1Server).TLV1(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tdd_V1_TLV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestForm)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Tdd_V1Server).TLV2(m, &tdd_V1TLV2Server{stream})
}

type Tdd_V1_TLV2Server interface {
	Send(*ResponseSingle) error
	grpc.ServerStream
}

type tdd_V1TLV2Server struct {
	grpc.ServerStream
}

func (x *tdd_V1TLV2Server) Send(m *ResponseSingle) error {
	return x.ServerStream.SendMsg(m)
}

// Tdd_V1_ServiceDesc is the grpc.ServiceDesc for Tdd_V1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tdd_V1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tdd_v1.Tdd_V1",
	HandlerType: (*Tdd_V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TLV1",
			Handler:    _Tdd_V1_TLV1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TLV2",
			Handler:       _Tdd_V1_TLV2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "TddService.proto",
}
